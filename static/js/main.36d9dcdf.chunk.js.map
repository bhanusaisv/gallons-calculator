{"version":3,"sources":["Components/FarmDataForm.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["axios","require","default","handleDateChange","date","a","dateEntity","Date","startDate","getFullYear","getMonth","getDate","dummyDate","setDate","endDate","get","headers","mode","then","abc","console","log","catch","err","FormDataForm","initialValues","numberOfSets","validate","onSubmit","values","alert","JSON","stringify","className","type","min","name","placeHolder","selected","onChange","dateFormat","showWeekNumbers","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"4OAKMA,G,MAAQC,EAAQ,IAASC,SAMzBC,EAAgB,uCAAG,WAAOC,GAAP,qBAAAC,EAAA,6DAMjBC,EAAa,IAAIC,KAAKH,GACtBI,EAPiB,UAOFF,EAAWG,cAPT,YAO0BH,EAAWI,WAPrC,YAOmDJ,EAAWK,YAC/EC,EAAY,IAAIL,MACZM,QAAQP,EAAWK,UAAY,GACnCG,EAViB,UAUJF,EAAUH,cAVN,YAUuBG,EAAUF,WAVjC,YAU+CE,EAAUD,WAVzD,SAqBjBX,EAAMe,IAAN,mJAAsJP,EAAtJ,oBAA2KM,EAA3K,sCAAwN,CAAEE,QAAS,CAAE,eAAgB,mBAAoBC,KAAM,OAAQ,mBAAoB,oBAAqBC,MACtU,SAAUC,GAERC,QAAQC,IAAIF,MACZG,OAAM,SAACC,GAAD,OAAcH,QAAQC,IAAIE,MAzBX,2CAAH,sDAqFPC,EAzDM,WACnB,OACA,2BACE,gBAAC,IAAD,CACEC,cAAe,CAAEC,aAAc,GAC/BC,SAAU,aACVC,SAAU,SAACC,GACTC,MAAMC,KAAKC,UAAUH,IAtC3BC,MAAM,WA0CF,gBAAC,IAAD,KACE,uBAAKG,UAAU,iBACb,kDACA,uBAAKA,UAAU,eACb,uBAAKA,UAAU,cACb,sDACA,gBAAC,IAAD,CAAOC,KAAK,SAASC,IAAI,IAAIC,KAAK,sBAAsBC,YAAY,2BAEtE,uBAAKJ,UAAU,cACb,sCACA,gBAAC,IAAD,CAAOC,KAAK,SAASC,IAAI,IAAIC,KAAK,WAEpC,uBAAKH,UAAU,cACb,4CACA,gBAAC,IAAD,CAAOC,KAAK,SAASC,IAAI,IAAIC,KAAK,gBAEpC,uBAAKH,UAAU,cACb,6CACA,gBAAC,IAAD,CAAOC,KAAK,SAASC,IAAI,IAAIC,KAAK,iBAEpC,uBAAKH,UAAU,cACb,2CACA,gBAAC,IAAD,CACEK,SAAU,KACVC,SAAUpC,EACVqC,WAAW,aACXC,iBAAe,OAMvB,uBAAKR,UAAU,oBACb,8CACA,uBAAKA,UAAU,cACb,+CACA,gBAAC,IAAD,CAAOC,KAAK,SAASC,IAAI,IAAIC,KAAK,eAAeC,YAAY,qBAGjE,0BAAQH,KAAK,UAAb,4BCzEOQ,MAXf,WACE,OACE,yBAAKT,UAAU,OACb,yBAAKA,UAAU,WACb,yEACA,kBAAC,EAAD,SCEYU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrC,MAAK,SAAAsC,GACJA,EAAaC,gBAEdnC,OAAM,SAAAoC,GACLtC,QAAQsC,MAAMA,EAAMC,a","file":"static/js/main.36d9dcdf.chunk.js","sourcesContent":["import * as React from 'react'\nimport { Field, Form, Formik } from 'formik'\nimport DatePicker from 'react-datepicker'\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nconst axios = require('axios').default \n\nconst showCIMISET = () => {\n  alert(\"Hello\")\n}\n\nconst handleDateChange = async (date: Date) => {\n  // const instance = axios.create({\n  //   baseURL: 'https://et.water.ca.gov/api/data',\n  //   timeout: 10000,\n  //   headers: {'X-Custom-Header': 'foobar'}\n  // });\n  const dateEntity = new Date(date)\n  const startDate = `${dateEntity.getFullYear()}-${dateEntity.getMonth()}-${dateEntity.getDate()}`\n  const dummyDate = new Date()\n  dummyDate.setDate(dateEntity.getDate() + 7)\n  const endDate = `${dummyDate.getFullYear()}-${dummyDate.getMonth()}-${dummyDate.getDate()}`\n//   var someDate = new Date();\n// var numberOfDaysToAdd = 6;\n// someDate.setDate(someDate.getDate() + numberOfDaysToAdd);\n// var dd = someDate.getDate();\n// var mm = someDate.getMonth() + 1;\n// var y = someDate.getFullYear();\n// var someFormattedDate = dd + '/'+ mm + '/'+ y;\n// console.log(someFormattedDate)\n  // const proxyurl = \"https://cors-anywhere.herokuapp.com/\";\n  // const proxyurl = 'https://cors-proxy.htmldriven.com/'\n  await axios.get(`https://cors-anywhere.herokuapp.com/https://et.water.ca.gov/api/data?appKey=e97e98e0-d962-4a88-bc08-5766dff0fad5&targets=85328&startDate=${startDate}&endDate=${endDate}&dataItems=day-eto&prioritizeSCS=Y`, { headers: { 'Content-Type': 'application/json', mode: 'cors', 'X-Requested-With': 'XMLHttpRequest' }}).then(\n  function (abc: any) { \n    debugger\n    console.log(abc)}\n  ).catch((err: any) => console.log(err))\n}\n\nconst FormDataForm = () => {\n  return (\n  <div>\n    <Formik\n      initialValues={{ numberOfSets: 1 }}\n      validate={() => {}}\n      onSubmit={(values) => {\n        alert(JSON.stringify(values))\n        showCIMISET()\n      }}\n    >\n      <Form>\n        <div className=\"orchard-setup\">\n          <h2>Basic Orchards Setup</h2>\n          <div className=\"form-fields\">\n            <div className=\"form-field\">\n              <label>Year Orchards Planted</label>\n              <Field type=\"number\" min=\"1\" name=\"yearOrchardsPlanted\" placeHolder=\"Year Orchards Planted\" />\n            </div>\n            <div className=\"form-field\">\n              <label>Acres</label>\n              <Field type=\"number\" min=\"0\" name=\"acres\" />\n            </div>\n            <div className=\"form-field\">\n              <label>Row Spacing</label>\n              <Field type=\"number\" min=\"0\" name=\"rowSpacing\" />\n            </div>\n            <div className=\"form-field\">\n              <label>Tree Spacing</label>\n              <Field type=\"number\" min=\"0\" name=\"treeSpacing\" />\n            </div>\n            <div className=\"form-field\">\n              <label>Week Start</label>\n              <DatePicker\n                selected={null}\n                onChange={handleDateChange}\n                dateFormat=\"yyyy/MM/dd\"\n                showWeekNumbers\n              />\n              {/* <Field type=\"date\" min=\"0\" name=\"weekStart\" /> */}\n            </div>\n          </div>\n        </div>\n        <div className=\"irrigation-setup\">\n          <h2>Irrigation Setup</h2>\n          <div className=\"form-field\">\n            <label>Number of Sets</label>\n            <Field type=\"number\" min=\"1\" name=\"numberOfSets\" placeHolder=\"Number of Sets\" />\n          </div>\n        </div>\n        <button type=\"submit\">Get Gallons Required</button>\n      </Form>\n    </Formik>    \n  </div>\n  )  \n}\n\nexport default FormDataForm","import React from 'react';\nimport './App.css';\n\nimport FormDataForm from './Components/FarmDataForm';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"Content\">\n        <h1>Almonds Farm Water Requirement Calculator</h1>\n        <FormDataForm />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}